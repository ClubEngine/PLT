#############################################################################
# Makefile for building: plt
# Generated by qmake (2.01a) (Qt 4.8.2) on: Sun Mar 30 12:11:05 2014
# Project:  plt.pro
# Template: app
# Command: /usr/bin/qmake-qt4 -spec /usr/share/qt4/mkspecs/linux-g++ CONFIG+=debug CONFIG+=declarative_debug -o Makefile plt.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_WEBKIT -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -g -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -pipe -g -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4 -I/usr/local/include -I../common -I.
LINK          = g++
LFLAGS        = 
LIBS          = $(SUBLIBS)  -L/usr/lib/x86_64-linux-gnu -L../common/ -lcommon -L/usr/local/lib/ -lsfml-graphics -lsfml-window -lsfml-audio -lsfml-system -lsfml-network -lQtGui -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake-qt4
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = obj/

####### Files

SOURCES       = main.cpp \
		core/TextureHolder.cpp \
		core/SoundHolder.cpp \
		core/state/StateStack.cpp \
		core/state/State.cpp \
		gameplay/TitleState.cpp \
		core/state/AbstractStateFactory.cpp \
		core/Context.cpp \
		gameplay/GameState.cpp \
		core/Application.cpp \
		core/map.cpp \
		core/state/DebugState.cpp \
		gameplay/TestState.cpp \
		gameplay/MyStateFactory.cpp \
		gameplay/PauseState.cpp \
		core/Camera.cpp \
		entity/EntityManager.cpp \
		entity/Unit.cpp \
		core/network/NetInterface.cpp \
		entity/MovableEntity.cpp 
OBJECTS       = obj/main.o \
		obj/TextureHolder.o \
		obj/SoundHolder.o \
		obj/StateStack.o \
		obj/State.o \
		obj/TitleState.o \
		obj/AbstractStateFactory.o \
		obj/Context.o \
		obj/GameState.o \
		obj/Application.o \
		obj/map.o \
		obj/DebugState.o \
		obj/TestState.o \
		obj/MyStateFactory.o \
		obj/PauseState.o \
		obj/Camera.o \
		obj/EntityManager.o \
		obj/Unit.o \
		obj/NetInterface.o \
		obj/MovableEntity.o
DIST          = /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/debug.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/declarative_debug.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		plt.pro
QMAKE_TARGET  = plt
DESTDIR       = 
TARGET        = plt

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)
	{ test -n "$(DESTDIR)" && DESTDIR="$(DESTDIR)" || DESTDIR=.; } && test $$(gdb --version | sed -e 's,[^0-9]\+\([0-9]\)\.\([0-9]\).*,\1\2,;q') -gt 72 && gdb --nx --batch --quiet -ex 'set confirm off' -ex "save gdb-index $$DESTDIR" -ex quit '$(TARGET)' && test -f $(TARGET).gdb-index && objcopy --add-section '.gdb_index=$(TARGET).gdb-index' --set-section-flags '.gdb_index=readonly' '$(TARGET)' '$(TARGET)' && rm -f $(TARGET).gdb-index || true

Makefile: plt.pro  /usr/share/qt4/mkspecs/linux-g++/qmake.conf /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/debug.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/declarative_debug.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib/x86_64-linux-gnu/libQtGui.prl \
		/usr/lib/x86_64-linux-gnu/libQtCore.prl
	$(QMAKE) -spec /usr/share/qt4/mkspecs/linux-g++ CONFIG+=debug CONFIG+=declarative_debug -o Makefile plt.pro
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/common/gcc-base.conf:
/usr/share/qt4/mkspecs/common/gcc-base-unix.conf:
/usr/share/qt4/mkspecs/common/g++-base.conf:
/usr/share/qt4/mkspecs/common/g++-unix.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/debug.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/declarative_debug.prf:
/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib/x86_64-linux-gnu/libQtGui.prl:
/usr/lib/x86_64-linux-gnu/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -spec /usr/share/qt4/mkspecs/linux-g++ CONFIG+=debug CONFIG+=declarative_debug -o Makefile plt.pro

dist: 
	@$(CHK_DIR_EXISTS) obj/plt1.0.0 || $(MKDIR) obj/plt1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) obj/plt1.0.0/ && $(COPY_FILE) --parents core/TextureHolder.hpp core/Textures.hpp core/SoundHolder.hpp core/Sounds.hpp core/state/StateStack.hpp core/state/States.hpp core/state/State.hpp gameplay/TitleState.hpp core/state/AbstractStateFactory.hpp core/Context.hpp gameplay/GameState.hpp core/Application.hpp core/map.hpp core/state/DebugState.hpp gameplay/TestState.hpp gameplay/MyStates.hpp gameplay/MyStateFactory.hpp gameplay/PauseState.hpp core/Camera.hpp entity/EntityManager.hpp entity/Entity.hpp entity/Unit.hpp core/network/NetInterface.hpp Log.hpp entity/MovableEntity.hpp obj/plt1.0.0/ && $(COPY_FILE) --parents main.cpp core/TextureHolder.cpp core/SoundHolder.cpp core/state/StateStack.cpp core/state/State.cpp gameplay/TitleState.cpp core/state/AbstractStateFactory.cpp core/Context.cpp gameplay/GameState.cpp core/Application.cpp core/map.cpp core/state/DebugState.cpp gameplay/TestState.cpp gameplay/MyStateFactory.cpp gameplay/PauseState.cpp core/Camera.cpp entity/EntityManager.cpp entity/Unit.cpp core/network/NetInterface.cpp entity/MovableEntity.cpp obj/plt1.0.0/ && (cd `dirname obj/plt1.0.0` && $(TAR) plt1.0.0.tar plt1.0.0 && $(COMPRESS) plt1.0.0.tar) && $(MOVE) `dirname obj/plt1.0.0`/plt1.0.0.tar.gz . && $(DEL_FILE) -r obj/plt1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all:
compiler_moc_header_clean:
compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: 

####### Compile

obj/main.o: main.cpp core/Application.hpp \
		core/SoundHolder.hpp \
		core/Sounds.hpp \
		core/TextureHolder.hpp \
		core/Textures.hpp \
		core/state/StateStack.hpp \
		core/state/AbstractStateFactory.hpp \
		core/state/States.hpp \
		core/state/State.hpp \
		core/Context.hpp \
		core/state/DebugState.hpp \
		gameplay/MyStateFactory.hpp \
		gameplay/MyStates.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/main.o main.cpp

obj/TextureHolder.o: core/TextureHolder.cpp core/TextureHolder.hpp \
		core/Textures.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/TextureHolder.o core/TextureHolder.cpp

obj/SoundHolder.o: core/SoundHolder.cpp core/SoundHolder.hpp \
		core/Sounds.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/SoundHolder.o core/SoundHolder.cpp

obj/StateStack.o: core/state/StateStack.cpp core/state/StateStack.hpp \
		core/state/AbstractStateFactory.hpp \
		core/state/States.hpp \
		core/state/State.hpp \
		core/Context.hpp \
		core/TextureHolder.hpp \
		core/Textures.hpp \
		core/state/DebugState.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/StateStack.o core/state/StateStack.cpp

obj/State.o: core/state/State.cpp core/state/State.hpp \
		core/state/States.hpp \
		core/Context.hpp \
		core/TextureHolder.hpp \
		core/Textures.hpp \
		core/state/StateStack.hpp \
		core/state/AbstractStateFactory.hpp \
		core/state/DebugState.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/State.o core/state/State.cpp

obj/TitleState.o: gameplay/TitleState.cpp gameplay/TitleState.hpp \
		core/state/State.hpp \
		core/state/States.hpp \
		core/Context.hpp \
		core/TextureHolder.hpp \
		core/Textures.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/TitleState.o gameplay/TitleState.cpp

obj/AbstractStateFactory.o: core/state/AbstractStateFactory.cpp core/state/AbstractStateFactory.hpp \
		core/state/States.hpp \
		core/state/State.hpp \
		core/Context.hpp \
		core/TextureHolder.hpp \
		core/Textures.hpp \
		core/state/DebugState.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/AbstractStateFactory.o core/state/AbstractStateFactory.cpp

obj/Context.o: core/Context.cpp core/Context.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/Context.o core/Context.cpp

obj/GameState.o: gameplay/GameState.cpp gameplay/GameState.hpp \
		core/state/State.hpp \
		core/state/States.hpp \
		core/Context.hpp \
		core/TextureHolder.hpp \
		core/Textures.hpp \
		core/map.hpp \
		core/Camera.hpp \
		core/network/NetInterface.hpp \
		../common/commands/core/Command.hpp \
		entity/EntityManager.hpp \
		entity/MovableEntity.hpp \
		../common/entity/Entity.hpp \
		gameplay/MyStates.hpp \
		../common/commands/gameplay/CommandMove.hpp \
		../common/commands/gameplay/CommandsType.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/GameState.o gameplay/GameState.cpp

obj/Application.o: core/Application.cpp core/Application.hpp \
		core/SoundHolder.hpp \
		core/Sounds.hpp \
		core/TextureHolder.hpp \
		core/Textures.hpp \
		core/state/StateStack.hpp \
		core/state/AbstractStateFactory.hpp \
		core/state/States.hpp \
		core/state/State.hpp \
		core/Context.hpp \
		core/state/DebugState.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/Application.o core/Application.cpp

obj/map.o: core/map.cpp core/map.hpp \
		core/TextureHolder.hpp \
		core/Textures.hpp \
		core/Context.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/map.o core/map.cpp

obj/DebugState.o: core/state/DebugState.cpp core/state/DebugState.hpp \
		core/state/State.hpp \
		core/state/States.hpp \
		core/Context.hpp \
		core/TextureHolder.hpp \
		core/Textures.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/DebugState.o core/state/DebugState.cpp

obj/TestState.o: gameplay/TestState.cpp gameplay/TestState.hpp \
		core/state/State.hpp \
		core/state/States.hpp \
		core/Context.hpp \
		core/TextureHolder.hpp \
		core/Textures.hpp \
		core/map.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/TestState.o gameplay/TestState.cpp

obj/MyStateFactory.o: gameplay/MyStateFactory.cpp gameplay/MyStateFactory.hpp \
		core/state/AbstractStateFactory.hpp \
		core/state/States.hpp \
		core/state/State.hpp \
		core/Context.hpp \
		core/TextureHolder.hpp \
		core/Textures.hpp \
		core/state/DebugState.hpp \
		gameplay/MyStates.hpp \
		gameplay/TitleState.hpp \
		gameplay/GameState.hpp \
		core/map.hpp \
		core/Camera.hpp \
		core/network/NetInterface.hpp \
		../common/commands/core/Command.hpp \
		entity/EntityManager.hpp \
		entity/MovableEntity.hpp \
		../common/entity/Entity.hpp \
		gameplay/TestState.hpp \
		gameplay/PauseState.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/MyStateFactory.o gameplay/MyStateFactory.cpp

obj/PauseState.o: gameplay/PauseState.cpp gameplay/PauseState.hpp \
		core/state/State.hpp \
		core/state/States.hpp \
		core/Context.hpp \
		core/TextureHolder.hpp \
		core/Textures.hpp \
		core/map.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/PauseState.o gameplay/PauseState.cpp

obj/Camera.o: core/Camera.cpp core/Camera.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/Camera.o core/Camera.cpp

obj/EntityManager.o: entity/EntityManager.cpp entity/EntityManager.hpp \
		entity/MovableEntity.hpp \
		../common/entity/Entity.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/EntityManager.o entity/EntityManager.cpp

obj/Unit.o: entity/Unit.cpp entity/Unit.hpp \
		entity/MovableEntity.hpp \
		../common/entity/Entity.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/Unit.o entity/Unit.cpp

obj/NetInterface.o: core/network/NetInterface.cpp Log.hpp \
		core/network/NetInterface.hpp \
		../common/commands/core/Command.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/NetInterface.o core/network/NetInterface.cpp

obj/MovableEntity.o: entity/MovableEntity.cpp entity/MovableEntity.hpp \
		../common/entity/Entity.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/MovableEntity.o entity/MovableEntity.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

